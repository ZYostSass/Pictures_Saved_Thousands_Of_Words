name: Doggr CICD

on:
  push:
    branches: [master, develop, sslpractice]
  pull_request:
    branches: [master, develop, sslpractice]

jobs:
#  backend_testing:
#    runs-on: ubuntu-latest
#    env:
#      DB_HOST: 0.0.0.0
#      DB_PORT: 5432
#      DB_NAME: doggr
#      DB_USER: doggr
#      DB_PASS: doggr
#      HOST: localhost
#      PORT: 8080
#      PASSWORD: password
#      NODE_ENV: development
#      AUTH_SECRET: ${{ secrets.DOGGR_AUTH_SECRET }}
#      MINIO_HOST: localhost
#      MINIO_PORT: 9000
#    services:
#      postgres:
#        image: postgres:15
#        env:
#          POSTGRES_USER: doggr
#          POSTGRES_PASSWORD: doggr
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 25
#        ports:
#          - 5432:5432
#    defaults:
#      run:
#        working-directory: backend
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Install Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#
#      - uses: pnpm/action-setup@v2
#        name: Install pnpm
#        id: pnpm-install
#        with:
#          version: 7
#          run_install: false
#
#      ## This is for caching dependencies between job executions
#      - name: Get pnpm dependency directory to put into cache for future jobs
#        id: pnpm-cache
#        shell: bash
#        run: |
#          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
#
#      - uses: actions/cache@v3
#        name: Actually create the Github Actions cache for those dependencies
#        with:
#          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
#          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-pnpm-store-
#
#      - name: Install dependencies
#        run: pnpm install
#
#      - name: Run Migrations
#        run: pnpm migration:freshSeed
#
#      - name: Run tests
#        run: pnpm test

#  frontend_testing:
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: frontend
#    env:
#      API_HOST: backend
#      PORT: 8080
#      MINIO_HOST: minio
#      MINIO_PORT: 9000
#    steps:
#      - uses: actions/checkout@v3
#        name: Checkout repository master branch
#
#      - uses: actions/setup-node@v3
#        name: Setup Node Environment
#        with:
#          node-version: 18
#
#      - uses: pnpm/action-setup@v2
#        name: Install pnpm
#        id: pnpm-install
#        with:
#          version: 7
#          run_install: false
#
#      - name: Get pnpm store directory
#        id: pnpm-cache
#        shell: bash
#        run: |
#          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
#
#      - uses: actions/cache@v3
#        name: Setup pnpm cache
#        with:
#          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
#          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-pnpm-store-
#
#      - name: Install dependencies
#        run: pnpm install
#
#      - name: Run Tests
#        run: pnpm test

  deploy:
    runs-on: ubuntu-latest
    #needs: [backend_testing, frontend_testing]
    steps:
      - uses: appleboy/ssh-action@master
        with:
          # Live site IP address (Normally this would be tied to a domain name like doggr.pro)
          host: ${{ secrets.DEPLOY_HOST }}
          username: root
          # This is explicitly an SSH private key stored inside of Github Repo's "Repository Secrets"
          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          script: |
            echo 'export API_HOST=${{ secrets.API_HOST }}' >> ~/.bashrc
            echo 'export API_PORT=${{ secrets.API_PORT }}' >> ~/.bashrc
            echo 'export DATABASE_URL=${{ secrets.DATABASE_URL }}' >> ~/.bashrc
            echo 'export POSTGRES_DB=${{ secrets.POSTGRES_DB }}' >> ~/.bashrc
            echo 'export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> ~/.bashrc
            echo 'export POSTGRES_USER=${{ secrets.POSTGRES_USER }}' >> ~/.bashrc
            echo 'export SALT=${{ secrets.SALT }}' >> ~/.bashrc
            echo 'export SQLX_OFFLINE=${{ secrets.SQLX_OFFLINE }}' >> ~/.bashrc
            source ~/.bashrc
            
            mkdir -p ~/workspace
            cd ~/workspace/
            rm -rf ./class_project
            git clone --depth=1 --branch sslpractice https://github.com/pdx-cs-rust-web/class_project class_project  # Clone the latest
            cd class_project
            docker compose down
            docker compose build --no-cache --compress
            docker compose up -d
            cd backend
            
            sudo apt-get install -y build-essential libssl-dev pkg-config
            
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
            
            cargo install sqlx-cli
            sqlx migrate run --database-url $DATABASE_URL
